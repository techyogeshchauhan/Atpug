# Terminal Seal Detection Project

A Flask-based web application for detecting terminal seals in images using YOLOv8 object detection. This tool supports both single image processing and batch processing via zip files, providing an intuitive web interface for seal detection with detailed results tracking.

![Python](https://img.shields.io/badge/python-v3.8+-blue.svg)
![Flask](https://img.shields.io/badge/flask-latest-green.svg)
![YOLOv8](https://img.shields.io/badge/YOLOv8-Ultralytics-orange.svg)
![License](https://img.shields.io/badge/license-MIT-blue.svg)

## 📋 Table of Contents

- [Features](#-features)
- [Prerequisites](#-prerequisites)
- [Installation](#-installation)
- [Project Structure](#-project-structure)
- [Usage](#-usage)
- [Configuration](#-configuration)
- [Output](#-output)
- [API Endpoints](#-api-endpoints)
- [Troubleshooting](#-troubleshooting)
- [Contributing](#-contributing)
- [License](#-license)

## ✨ Features

- **🖼️ Single Image Processing**: Upload individual images (.jpg, .png) for seal detection
- **📦 Batch Processing**: Process multiple images via zip file upload
- **🎯 Advanced Detection**: Uses pre-trained YOLOv8 model with configurable confidence threshold
- **🔢 Unique Identification**: Generates unique meter IDs for each processed image
- **📊 Visual Results**: Saves detection results with bounding boxes and confidence scores
- **📈 Excel Tracking**: Maintains comprehensive detection summary in Excel format
- **⬇️ Easy Downloads**: Download individual images or batch results as zip archives
- **🌐 Web Interface**: User-friendly web interface with results table
- **📱 Responsive Design**: Works across different devices and browsers

## 🔧 Prerequisites

- **Python**: 3.8 or higher
- **pip**: Python package manager
- **YOLOv8 Model**: Pre-trained model file (`best.pt`)
- **Browser**: Modern web browser (Chrome, Firefox, Safari, Edge)
- **Storage**: Adequate disk space for processing images and storing results

## 📦 Installation

### 1. Clone the Repository

```bash
git clone https://github.com/yourusername/terminal-seal-detection.git
cd terminal-seal-detection
```

### 2. Set Up Virtual Environment (Recommended)

```bash
# Create virtual environment
python -m venv venv

# Activate virtual environment
# On Windows:
venv\Scripts\activate
# On macOS/Linux:
source venv/bin/activate
```

### 3. Install Dependencies

```bash
pip install -r requirements.txt
```

**Or install manually:**
```bash
pip install flask opencv-python numpy ultralytics pandas openpyxl
```

### 4. Prepare the YOLO Model

- Ensure your trained YOLOv8 model file (`best.pt`) is available
- Update the `MODEL_PATH` variable in `app.py` to point to your model location:

```python
MODEL_PATH = "path/to/your/model/best.pt"
```

### 5. Create Project Directories

The application will automatically create necessary directories, but you can create them manually:

```bash
mkdir -p static/uploads static/detected templates
```

## 📁 Project Structure

```
terminal-seal-detection/
│
├── 📁 static/
│   ├── 📁 uploads/              # Uploaded images and zip files
│   └── 📁 detected/             # Processed images and Excel summary
│
├── 📁 templates/
│   └── 📄 index.html            # Web interface template
│
├── 📄 app.py                    # Main Flask application
├── 📄 requirements.txt          # Python dependencies
├── 📄 README.md                 # Project documentation
├── 📄 .gitignore               # Git ignore file
└── 📄 LICENSE                   # License file
```

## 🚀 Usage

### Starting the Application

```bash
python app.py
```

The server will start at `http://localhost:5000` (or `http://0.0.0.0:5000`)

### Web Interface Operations

#### Single Image Upload
1. **Select Image**: Choose a `.jpg` or `.png` image file
2. **Set Confidence**: Adjust the confidence threshold (default: 0.1)
3. **Submit**: Click "Upload and Detect" to process the image
4. **View Results**: See detected image with bounding boxes and seal status

#### Batch Processing
1. **Prepare Zip File**: Create a zip file containing `.jpg` or `.png` images
2. **Upload Zip**: Select and upload the zip file
3. **Process**: The application processes all images automatically
4. **Download Results**: Get a zip file with all detected images

#### Results Management
- **View History**: Browse all past detections in the results table
- **Download Files**: Download individual detected images
- **Excel Summary**: Access comprehensive detection data in `detection_summary.xlsx`

## ⚙️ Configuration

### Application Settings

```python
# Maximum upload file size (16MB)
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024

# Upload and output directories
UPLOAD_FOLDER = 'static/uploads'
DETECTED_FOLDER = 'static/detected'

# Model configuration
MODEL_PATH = "path/to/your/best.pt"
DEFAULT_CONFIDENCE = 0.1
```

### Customizable Parameters

- **Confidence Threshold**: Adjustable via web interface (0.0 - 1.0)
- **Upload Size Limit**: Modify `MAX_CONTENT_LENGTH` in `app.py`
- **Model Path**: Update `MODEL_PATH` to your model location
- **Output Folders**: Change `UPLOAD_FOLDER` and `DETECTED_FOLDER` as needed

## 📤 Output

### Single Image Processing
- **Detected Image**: Original image with green bounding boxes and confidence scores
- **Excel Entry**: New row added to `detection_summary.xlsx`
- **Metadata**: Unique meter ID, filename, and seal detection status

### Batch Processing
- **Zip Archive**: `detected_<timestamp>.zip` containing all processed images
- **Excel Updates**: Multiple entries added to summary file
- **Individual Files**: Each detected image saved separately

### Excel Summary Format
| Column | Description |
|--------|-------------|
| `meter_id` | Unique identifier for each processed image |
| `filename` | Original image filename |
| `seal_available` | Boolean indicating seal detection status |

## 🔗 API Endpoints

| Endpoint | Method | Description |
|----------|--------|-------------|
| `/` | GET | Main web interface |
| `/upload` | POST | Single image upload and detection |
| `/batch_upload` | POST | Batch zip file processing |
| `/download/<filename>` | GET | Download detected images |
| `/download_zip/<filename>` | GET | Download batch result zip |

## 🐛 Troubleshooting

### Common Issues

**Model Loading Error**
```
Solution: Verify MODEL_PATH points to a valid YOLOv8 model file
```

**Upload Size Error**
```
Solution: Check file size is under 16MB or adjust MAX_CONTENT_LENGTH
```

**Permission Error**
```
Solution: Ensure write permissions for static/uploads and static/detected folders
```

**Import Error**
```
Solution: Install missing dependencies using pip install -r requirements.txt
```

### Debug Mode

Enable debug mode for development:
```python
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
```

## 🤝 Contributing

We welcome contributions! Here's how to get started:

### Steps to Contribute

1. **Fork** the repository
2. **Create** a feature branch:
   ```bash
   git checkout -b feature/amazing-feature
   ```
3. **Commit** your changes:
   ```bash
   git commit -m "Add amazing feature"
   ```
4. **Push** to the branch:
   ```bash
   git push origin feature/amazing-feature
   ```
5. **Open** a Pull Request

### Contribution Guidelines

- Follow Python PEP 8 style guidelines
- Add tests for new features
- Update documentation as needed
- Ensure backward compatibility

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 📞 Support

If you encounter any issues or have questions:

1. Check the [Troubleshooting](#-troubleshooting) section
2. Review [Issues](https://github.com/yourusername/terminal-seal-detection/issues)
3. Create a new issue with detailed information

## 🙏 Acknowledgments

- [Ultralytics YOLOv8](https://github.com/ultralytics/ultralytics) for the object detection model
- [Flask](https://flask.palletsprojects.com/) for the web framework
- [OpenCV](https://opencv.org/) for image processing capabilities

---

**Made with ❤️ for terminal seal detection**
