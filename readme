Terminal Seal Detection Project

This project is a Flask-based web application designed to detect terminal seals in images using the YOLOv8 model from Ultralytics. It supports single image uploads or batch processing via zip files, performs object detection, and saves results in a structured format with an Excel summary.
Table of Contents

Features
Prerequisites
Installation
Project Structure
Usage
Configuration
Output
Contributing
License

Features

Upload single images (.jpg, .png) or zip folders containing multiple images for seal detection.
Detect terminal seals using a pre-trained YOLOv8 model with a configurable confidence threshold.
Generate unique meter IDs for each processed image.
Save detection results as images with bounding boxes and confidence scores.
Maintain a summary of detections in an Excel file (detection_summary.xlsx).
Download detected images as individual files or as a zip archive for batch processing.
Display a table of all detection results on the web interface.

Prerequisites

Python 3.8 or higher
pip (Python package manager)
A pre-trained YOLOv8 model file (best.pt) located at D:/Atpug/terminal_seal_project/runs/train/exp/best.pt
Supported browsers (e.g., Chrome, Firefox) for accessing the web interface

Installation

Clone the Repository (or create the project folder):
git clone <repository-url>
cd terminal-seal-detection


Set Up a Virtual Environment (optional but recommended):
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate


Install Dependencies:
pip install flask opencv-python numpy ultralytics pandas openpyxl


Prepare the YOLO Model:

Ensure the YOLOv8 model file (best.pt) is placed at D:/Atpug/terminal_seal_project/runs/train/exp/best.pt.
If the model is located elsewhere, update the MODEL_PATH variable in the script.


Create Necessary Directories:The application automatically creates static/uploads and static/detected folders on startup, but you can manually create them:
mkdir -p static/uploads static/detected



Project Structure
terminal-seal-detection/
│
├── static/
│   ├── uploads/                # Folder for uploaded images and zip files
│   ├── detected/               # Folder for detected images and Excel summary
│
├── templates/
│   ├── index.html              # HTML template for the web interface
│
├── app.py                      # Main Flask application script
├── README.md                   # Project documentation
└── requirements.txt            # Python dependencies (optional, create with `pip freeze > requirements.txt`)

Usage

Run the Application:
python app.py

The server will start at http://0.0.0.0:5000. Access it via a web browser.

Web Interface:

Single Image Upload:
Select a .jpg or .png image and set the confidence threshold (default: 0.1).
Submit to detect seals. The detected image, meter ID, and seal status will be displayed.


Batch Upload:
Upload a .zip file containing .jpg or .png images.
The application processes all images, saves detected images, and provides a downloadable zip file.


View Results:
A table displays all past detections (loaded from detection_summary.xlsx).
Download individual detected images or the batch zip file.




Excel Summary:

Results are saved in static/detected/detection_summary.xlsx with columns: meter_id, filename, and seal_available.



Configuration

Upload Folder: static/uploads (stores uploaded images and zip files).
Detected Folder: static/detected (stores detected images and Excel file).
Max Upload Size: 16MB (configurable via app.config['MAX_CONTENT_LENGTH']).
Model Path: Update MODEL_PATH in app.py if the YOLO model is stored elsewhere.
Confidence Threshold: Adjustable via the web interface (default: 0.1).

Output

Single Image:
Detected image with green bounding boxes and confidence scores.
Entry added to detection_summary.xlsx.


Batch Upload:
Zip file containing all detected images (detected_<timestamp>.zip).
Multiple entries added to detection_summary.xlsx.



Contributing
Contributions are welcome! Please:

Fork the repository.
Create a new branch (git checkout -b feature-branch).
Commit your changes (git commit -m "Add feature").
Push to the branch (git push origin feature-branch).
Create a pull request.

License
This project is licensed under the MIT License. See the LICENSE file for details.